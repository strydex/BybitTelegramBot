import asyncio
import config
from bybit_client import BybitClient
from telegram_bot import send_message
import matplotlib.pyplot as plt
from aiogram import Bot, Dispatcher, F, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.bot import DefaultBotProperties
import time
from datetime import datetime, timedelta
import pytz
import random

TOKEN = config.TELEGRAM_BOT_TOKEN
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher(storage=MemoryStorage())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Bybit
client = BybitClient(config.BYBIT_API_KEY, config.BYBIT_API_SECRET)

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (50 –º–∏–Ω—É—Ç = 3000 —Å–µ–∫—É–Ω–¥)
MESSAGE_INTERVAL = 3000
# –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å
DAILY_MESSAGE_LIMIT = 18

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
timezone = pytz.timezone('Europe/Moscow')

async def monitor_market(last_message_time, message_count, message_count_reset_time):
    while True:
        current_time = datetime.now(timezone)
        if current_time - last_message_time >= timedelta(seconds=MESSAGE_INTERVAL):
            if message_count < DAILY_MESSAGE_LIMIT:
                try:
                    tickers = client.get_tickers()
                    random_ticker = random.choice(tickers)
                    symbol = random_ticker['symbol']
                    price_change = client.get_price_change(symbol)
                    if abs(price_change) > config.PRICE_CHANGE_THRESHOLD:
                        message = f"üö®<b>Crypto Alert!</b>üö®\n\n<b>–¢–∏–∫–µ—Ä:</b> {symbol}\n<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã:</b> {price_change:.2f}%"
                        await bot.send_message(chat_id=config.TELEGRAM_CHANNEL_ID, text=message, parse_mode='HTML')
                        print(f"Sent message: {message}")  # –î–æ–±–∞–≤–∏–ª —ç—Ç—É Line –¥–ª—è –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª–∏
                        last_message_time = current_time
                        message_count += 1
                except Exception as e: # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                    print(f"An error occurred: {e}")
            else:
                if current_time >= message_count_reset_time:
                    message_count = 0
                    message_count_reset_time = current_time + timedelta(days=1)
        await asyncio.sleep(config.CHECK_INTERVAL) #–†–µ–≥—É–ª–∏—Ä—É–µ–º –¥–∏–ª—ç–π –∑–∞–ø—Ä–æ—Å–æ–≤

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º TG –ø–æ–ª–ª–∏–Ω–≥
    polling_task = asyncio.create_task(dp.start_polling(bot))
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä—ã–Ω–∫–∞
    monitoring_task = asyncio.create_task(monitor_market(datetime.now(timezone), 0, datetime.now(timezone) + timedelta(days=1)))
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–µ–∏—Ö –∑–∞–¥–∞—á
    await asyncio.gather(polling_task, monitoring_task)

if __name__ == '__main__':
    asyncio.run(main())
